using System.Security.Cryptography;

namespace PassStorage3.Crypto.Tests
{
    internal class AesCryptoServiceTests
    {
        [SetUp]
        public void Setup()
        {
        }

        [TestCaseSource(typeof(AesCryptoServiceTestCases), nameof(AesCryptoServiceTestCases.SetKeysTestCases))]
        public void SetKeyAndIV(string firstPassword, string secondPassword)
        {
            AesCryptoService service = new();

            if (!string.IsNullOrEmpty(firstPassword) && !string.IsNullOrEmpty(secondPassword))
            {
                service.SetKeys(firstPassword, secondPassword);

                Assert.Multiple(() =>
                {
                    Assert.That(service.Key, Is.Not.Null);
                    Assert.That(service.IV, Is.Not.Null);
                });
            }
            else
            {
                Assert.That(
                    () => service.SetKeys(firstPassword, secondPassword),
                    Throws.TypeOf<ArgumentNullException>()
                    );

                Assert.Multiple(() =>
                {
                    Assert.That(service.Key, Is.Null);
                    Assert.That(service.IV, Is.Null);
                });

                return;
            }

            var aes = Aes.Create();
            aes.KeySize = AesCryptoService.KeySize;
            aes.BlockSize = AesCryptoService.BlockSize;

            byte[] autogeneratedAesKey = aes.Key;
            byte[] autogeneratedAesIV = aes.IV;

            var derived = new Rfc2898DeriveBytes(service.Key, service.IV, AesCryptoService.Iterations);
            aes.Key = derived.GetBytes(aes.KeySize / 8);
            aes.IV = derived.GetBytes(aes.BlockSize / 8);
            
            Assert.Multiple(() =>
            {
                Assert.That(aes.KeySize, Is.EqualTo(256));
                Assert.That(aes.BlockSize, Is.EqualTo(128));
                Assert.That(aes.Key.Length, Is.EqualTo(32));
                Assert.That(aes.IV.Length, Is.EqualTo(16));
                Assert.That(aes.Key, Is.Not.SameAs(autogeneratedAesKey));
                Assert.That(aes.Key, Is.Not.SameAs(autogeneratedAesIV));
                Assert.That(aes.Mode, Is.EqualTo(CipherMode.CBC));
                Assert.That(aes.Padding, Is.EqualTo(PaddingMode.PKCS7));
            });
        }
    }
}